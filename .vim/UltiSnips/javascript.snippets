snippet if "If statement"
if ($1) {$2}
endsnippet

snippet ife "If...else statement"
if ($1) {
	$2
} else {
	$3
}
endsnippet

snippet ei "Else if statement"
else if ($1) {
	$2
}
endsnippet

snippet switch "Switch statement"
switch ($1) {
	case ${2:choice}:
		$3
		break;

	default:
		$4
}
endsnippet

snippet case "Case statement"
case ${1:choice}:
	$2
	break;
endsnippet

snippet for
for (var ${1:i = 0}${2:, items = 10}; ${3:i < items}; ${4:i++}) {
	$5
}
endsnippet

snippet while
while ($1) {$2}
endsnippet

snippet do "Do While Loop"
var ${1:i = 0}, ${2:items = 10};
do {
	$4
} while (${3:i < items.length})
endsnippet

snippet fun "Function statement"
function ${1:name}($2) {
	$3
}
endsnippet

snippet f "Anonymous function" w
function ($1) {
	$2
}
endsnippet

snippet fe "Named function expression"
var ${1: name} = function ${2: name}($3) {
	$4
}
endsnippet

snippet iife "Immediately Invoked Function Expression" w
(function($1) {
	$2
}($3));
endsnippet

snippet af "Arrow function" w
($1) => {$2}
endsnippet

snippet fc "Function Constructor"
function ${1:Object}(${2:property}) {
	this.$2 = $2;
	$3
}

$1.prototype = {
	constructor: $1;
};
endsnippet

snippet fci "Constructor Inheritance"
function ${1:Object}(${2:property}) {
	${3:Parent}.call(this, $2);
	$4
}

$1.prototype = Object.create($3.prototype, {
	constructor: {
		configurable: true,
		enumerable: true,
		value: $1,
		writable: true
	}
});
endsnippet

snippet class "Class"
class ${1:Object} {
	constructor(${2:property}) {
		this.$2 = $2;	
	}
	$3
}
endsnippet

snippet subclass "Extends Class"
class ${1:Object} extends ${2:Parent} {
	constructor(${3: property}) {
		super($3);
		$4
	}
	$5
}
endsnippet

snippet promise "Unsettled Promise"
const $1 = new Promise((resolve, reject) => {
	$2
});
endsnippet
