snippet ex-app "Express App"
const express = require('express');
const path = require('path');

const routes = require('${1:./routes/index}');

const app = express();

app.set('views', path.join(__dirname, '${2:views}'));
app.set('view engine', '${3:hbs}');

app.use(express.static(path.join(__dirname, '${4:public}')));

app.use('/', routes);

module.exports = app;
endsnippet

snippet ex-listen "Express Server"
const app = require('./app');

app.set('port', process.env.PORT || ${1:7777});

const server = app.listen(app.get('port'), () => {
	console.log(\`App listening on port ${server.address().port}\`);
});
endsnippet

snippet ex-router "Express Router"
const express = require('express');
const router = express.Router();

${0:${VISUAL}}

module.exports = router;
endsnippet

snippet ex-req-get "Express GET Request"
${1:router}.get('${2:/}', ${3:controller_name});
endsnippet

snippet ex-req-post "Express POST Request"
${1:router}.post('${2:/}', ${3:controller_name});
endsnippet

snippet ex-req-all "Express handler that matches all HTTP Verbs"
${1:router}.all('${2:/}', ${3:controller_name});
endsnippet

snippet ex-req-route "Express Route. Can chain multiple HTTP Verbs"
${1:router}.route('${2:/}')
	.${3:get}(${4:controller_name})
	.${5:post}(${6:controller_name});
endsnippet

snippet ex-req-param "Express Route Parameters"
${1:router}.${2:get}('${3:/users/:userId}', ${4:(req, res) => {
	console.log(req.params);
}});
endsnippet

snippet ex-param-cb "Express Param Callback. The parameters of the callback are request, response, next middleware, value of the parameter, and name of the parameter"
app.param('${1:user}', (req, res, next, ${2:id}) => {
	${3:User.find(id, (err, user) => {
		if (err) {
			next(err);
		} else if (user) {
			req.user = user;
			next();
		} else {
			next(new Error('failed to load user'));
		}
	});}
});
endsnippet

snippet ex-mid "Express Middleware"
app.use(${1:'${2:/abcd}', }(req, res, next) => {
	${3:console.log('this is middleware');}
	next();
});
endsnippet

snippet ex-mid-error "Express Error Middleware"
app.use((err, req, res, next) => {
	res.status(err.status || 500);
	res.render('error', {
		message: err.message,
		error: {},
	});
});
endsnippet

snippet ex-cont-download "Express Download Controller"
exports.${1:download} = (req, res) => {
	res.download('${2:/report-12345.pdf}'${3:, '${4:report.pdf}'})
};
endsnippet

snippet ex-cont-json "Express JSON Controller"
exports.${1:json} = (req, res) => {
	res.json({ ${2:name: 'john'} });
};
endsnippet

snippet ex-cont-redirect "Express Redirect Controller"
exports.${1:redirect} = (req, res) => {
	res.redirect(${2:301}, '${3:http://example.com}');
};
endsnippet

snippet ex-cont-render "Express Render Controller"
exports.${1:render} = (req, res) => {
	res.render('${2:index}'${3:, {${4:name: 'john'}}});
};
endsnippet

snippet ex-cont-file "Express File Controller"
exports.${1:sendFile} = (req, res) => {
	res.sendFile('${2:image.jpg}');
};
endsnippet
